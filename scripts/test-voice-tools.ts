import type { MutableRefObject } from 'react'
import type { RelocationProfile, ServiceId, TaskStatus, TimelineTask } from '../src/types/timeline'
import { createToolHandlers, type ToolHandlerContext } from '../src/hooks/useVoiceTimeline'

function createRef<T>(value: T): MutableRefObject<T> {
  return { current: value } as MutableRefObject<T>
}

const tasks: TimelineTask[] = []
const selected: ServiceId[] = []
const relocationProfile: RelocationProfile = {}

const tasksRef = createRef([...tasks])
const selectedServicesRef = createRef<ServiceId[]>([...selected])
const relocationProfileRef = createRef(relocationProfile)

let persistedTasks: TimelineTask[] = [...tasks]
let persistedSelectedServices: ServiceId[] = [...selected]
let persistedProfile: RelocationProfile = { ...relocationProfile }

const log: string[] = []

const context: ToolHandlerContext = {
  tasksRef,
  selectedServicesRef,
  setSelectedServices: (ids: ServiceId[]) => {
    persistedSelectedServices = ids
    selectedServicesRef.current = ids
  },
  replaceTasks: (next: TimelineTask[]) => {
    persistedTasks = next
    tasksRef.current = next
  },
  upsertTask: (task: TimelineTask) => {
    const index = persistedTasks.findIndex((item) => item.id === task.id)
    if (index >= 0) {
      persistedTasks[index] = task
    } else {
      persistedTasks.push(task)
    }
    tasksRef.current = [...persistedTasks]
  },
  updateTaskStatus: (taskId: string, status: TaskStatus) => {
    persistedTasks = persistedTasks.map((task) =>
      task.id === taskId ? { ...task, status } : task,
    )
    tasksRef.current = [...persistedTasks]
  },
  buildServiceTasks: (serviceId: ServiceId) => {
    const base: TimelineTask[] = [
      {
        id: `${serviceId}-task-1`,
        serviceId,
        title: `${serviceId} task 1`,
        description: 'autogenerated',
        timeframe: 'soon',
        status: 'pending',
        sequence: 1,
      },
    ]
    persistedTasks = [...persistedTasks, ...base]
    tasksRef.current = [...persistedTasks]
    return base
  },
  relocationProfileRef,
  setRelocationProfile: (profile: RelocationProfile) => {
    persistedProfile = profile
    relocationProfileRef.current = profile
  },
}

const toolHandlers = createToolHandlers(context)

async function run() {
  log.push('Selecting services')
  await toolHandlers.select_services({ services: ['housing'] })
  log.push(`Selected services: ${persistedSelectedServices.join(',')}`)

  log.push('Adding tasks')
  await toolHandlers.add_service_tasks({ serviceId: 'housing' })
  log.push(`Task count: ${persistedTasks.length}`)

  log.push('Setting relocation profile')
  await toolHandlers.set_relocation_profile({ from_city: 'Paris', to_city: 'Berlin' })
  log.push(`Profile: ${persistedProfile.fromCity} -> ${persistedProfile.toCity}`)

  log.push('Listing tasks with limit=1')
  const listResult = await toolHandlers.list_tasks({ service: 'housing', limit: 1 })
  log.push(`List response count: ${listResult.count}`)

  console.log(log.join('\n'))
}

run().catch((error) => {
  console.error(error)
  process.exitCode = 1
})
